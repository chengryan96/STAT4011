train <- dataName[ind*0.7, ]
test <- dataName[ind*0.3, ]
ind <- nrow(df)
train <- df[ind*0.7, ]
test <- df[ind*0.3, ]
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
train
ind*0.7
1:ind*0.7
1:int(ind*0.7)
as.integer(int(ind*0.7))
as.integer((ind*0.7))
ind <- nrow(df)
train <- df[1:as.integer((ind*0.7)), ]
test <- df[as.integer((ind*0.7))+1:ind*0.3, ]
train
test
ind <- nrow(df)
train <- df[1:as.integer((ind*0.7)), ]
test <- df[as.integer((ind*0.7))+1:nrow(df), ]
train
test
ind <- nrow(df)
train <- df[1:as.integer((ind*0.7)), ]
test <- df[as.integer((ind*0.7))+1:nrow(df), ]
as.integer((ind*0.7))+1
as.integer((ind*0.7))+1:nrow(df)
nrow(df)
as.integer((ind*0.7+1)):nrow(df)
ind <- nrow(df)
train <- df[1:as.integer((ind*0.7)), ]
test <- df[as.integer((ind*0.7+1)):nrow(df), ]
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
predict(lin_reg, test)
predict = predict(lin_reg, test)
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
summary(lin_reg)
predicted = predict(lin_reg, test)
predict
library(ggplot2)
set.seed(4011)
file_path = "C:/Users/cheng/OneDrive/Desktop/hw/STAT4011/STAT4011/dataset"
case =  read.csv(paste0(file_path, '/Time.csv'))
policy = read.csv(paste0(file_path, '/Policy.csv'))
search_trend = read.csv(paste0(file_path, '/SearchTrend.csv'))
province = read.csv(paste0(file_path, '/TimeProvince.csv'), stringsAsFactors = FALSE)
weather = read.csv(paste0(file_path, '/Weather.csv'), stringsAsFactors = FALSE)
timeage = read.csv(paste0(file_path, '/Timeage.csv'), stringsAsFactors = FALSE, row.names=NULL)
timegen = read.csv(paste0(file_path, '/TimeGender.csv'), stringsAsFactors = FALSE, row.names=NULL)
case_policy_df = merge(case, policy, by.x='date', by.y='start_date', all = TRUE)[-1,]
case_policy_search = merge(case_policy_df, search_trend, by.x='date', by.y='date')
# non cumulative
case_policy_search$confirmed = c(0, diff(case_policy_search$confirmed))
case_policy_search$test = c(0, diff(case_policy_search$test))
case_policy_search$deceased = c(0, diff(case_policy_search$deceased))
df = case_policy_search
df$policy_id = as.numeric(df$policy_id)
df$date = as.Date(df$date)
for (i in 1:nrow(df)){
if (is.na(df$policy_id[i])) df$policy_id[i] = 0
if(df$policy_id[i] > 0) {
df$policy_id[i] = 1
} else {
df$policy_id[i] = 0
}
}
#plot the graph
ggplot() +
geom_line(data = df, aes(x = date, y = confirmed, color = 'confirmed')) +
geom_line(data = df, aes(x = date, y = deceased, color = 'deceased'))+
#geom_line(data = df, aes(x = date, y = test, color = 'test'))+
geom_point(data = df, aes(x = date, y = policy_id, color = 'government applied policy'), size = 0.01) +
ylab('')
ggplot() +
geom_line(data = df, aes(x = date, y = deceased, color = 'deceased'))
# plot search trend
ggplot() +
geom_line(data = df, aes(x = date, y = coronavirus, color = 'ppl search for coronavirus'))
ggplot() +
geom_line(data = df, aes(x = date, y = flu, color = 'ppl search for flu'))
case_search_df = merge(case, search_trend, by.x='date', by.y='date')
# non cumulative
case_search_df$confirmed = c(0, diff(case_search_df$confirmed))
case_search_df$test = c(0, diff(case_search_df$test))
case_search_df$deceased = c(0, diff(case_search_df$deceased))
case_search_df$negative = c(0, diff(case_search_df$negative))
case_search_df$released = c(0, diff(case_search_df$released))
corr_df = as.data.frame(cbind(df$confirmed, df$coronavirus, df$flu, df$policy_id))
colnames(corr_df) = c('confirmed', 'keyword_covid19', 'keyword_flu', 'gov_policy')
corr = cor(corr_df)
lin_reg_keywords = lm(confirmed ~ ., data = corr_df)
summary(lin_reg_keywords)
vip::vip(lin_reg_keywords)
step(lin_reg_keywords)
new_keywords_linreg = lm(formula = confirmed ~ keyword_covid19 + keyword_flu, data = corr_df)
summary(new_keywords_linreg)
vip::vip(new_keywords_linreg)
timeage_df = timeage[,c(-2,-5)]
timeage_df$date = as.Date(timeage_df$date)
timeage_df = as.data.frame(split(timeage_df, timeage_df$age))
timeage_df = data.frame(timeage_df$X0s.date, timeage_df$X0s.confirmed, timeage_df$X10s.confirmed, timeage_df$X20s.confirmed, timeage_df$X30s.confirmed, timeage_df$X40s.confirmed, timeage_df$X50s.confirmed, timeage_df$X60s.confirmed, timeage_df$X70s.confirmed, timeage_df$X80s.confirmed)
colnames(timeage_df) = c('date', 'confirmed_0s', 'confirmed_10s', 'confirmed_20s', 'confirmed_30s', 'confirmed_40s', 'confirmed_50s', 'confirmed_60s', 'confirmed_70s', 'confirmed_80s')
rownames(timeage_df) = timeage_df$date
age_confirm_corr = cor(timeage_df[,-1])
#non cumulation
time_non_cumu = data.frame(timeage_df$date[-1], apply(timeage_df[,-1], 2, diff))
colnames(time_non_cumu) = c('date', 'confirmed_0s', 'confirmed_10s', 'confirmed_20s', 'confirmed_30s', 'confirmed_40s', 'confirmed_50s', 'confirmed_60s', 'confirmed_70s', 'confirmed_80s')
timeage = read.csv(paste0(file_path, '/Timeage.csv'), stringsAsFactors = FALSE, row.names=NULL)
timeage_death_df = timeage
timeage_death_df = as.data.frame(split(timeage_death_df, timeage_death_df$age))
timeage_death_df = data.frame(timeage_death_df$X0s.date, timeage_death_df$X0s.deceased, timeage_death_df$X10s.deceased, timeage_death_df$X20s.deceased, timeage_death_df$X30s.deceased, timeage_death_df$X40s.deceased, timeage_death_df$X50s.deceased, timeage_death_df$X60s.deceased, timeage_death_df$X70s.deceased, timeage_death_df$X80s.deceased)
colnames(timeage_death_df) = c('date', 'death_0s', 'death_10s', 'death_20s', 'death_30s', 'death_40s', 'death_50s', 'death_60s', 'death_70s', 'death_80s')
timeage_death_df$date = as.Date(timeage_death_df$date)
#non cumu
time_death_non_cumu = data.frame(timeage_death_df$date[-1], apply(timeage_death_df[,-1], 2, diff))
colnames(time_death_non_cumu) = c('date', 'death_0s', 'death_10s', 'death_20s', 'death_30s', 'death_40s', 'death_50s', 'death_60s', 'death_70s', 'death_80s')
timegen_df = as.data.frame(split(timegen, timegen$sex))
timegen_confirm_df = data.frame(timegen_df$female.date, timegen_df$female.confirmed, timegen_df$male.confirmed)
colnames(timegen_confirm_df) = c('date', 'female', 'male')
timegen_confirm_df$date = as.Date(timegen_confirm_df$date)
#non cumu
timegen_confirm_noncumu_df = data.frame(timegen_confirm_df$date[-1], apply(timegen_confirm_df[,-1], 2, diff))
colnames(timegen_confirm_noncumu_df) = c('date', 'confirmed_female', 'confirmed_male')
timeage = read.csv(paste0(file_path, '/Timeage.csv'), stringsAsFactors = FALSE, row.names=NULL)
timeage_death_df = timeage
timeage_death_df = as.data.frame(split(timeage_death_df, timeage_death_df$age))
timeage_death_df = data.frame(timeage_death_df$X0s.date, timeage_death_df$X0s.deceased, timeage_death_df$X10s.deceased, timeage_death_df$X20s.deceased, timeage_death_df$X30s.deceased, timeage_death_df$X40s.deceased, timeage_death_df$X50s.deceased, timeage_death_df$X60s.deceased, timeage_death_df$X70s.deceased, timeage_death_df$X80s.deceased)
colnames(timeage_death_df) = c('date', 'death_0s', 'death_10s', 'death_20s', 'death_30s', 'death_40s', 'death_50s', 'death_60s', 'death_70s', 'death_80s')
timeage_death_df$date = as.Date(timeage_death_df$date)
#non cumu
time_death_non_cumu = data.frame(timeage_death_df$date[-1], apply(timeage_death_df[,-1], 2, diff))
colnames(time_death_non_cumu) = c('date', 'death_0s', 'death_10s', 'death_20s', 'death_30s', 'death_40s', 'death_50s', 'death_60s', 'death_70s', 'death_80s')
timegen_df = as.data.frame(split(timegen, timegen$sex))
timegen_death_df = data.frame(timegen_df$female.date, timegen_df$female.deceased, timegen_df$male.deceased)
colnames(timegen_death_df) = c('date', 'female', 'male')
timegen_death_df$date = as.Date(timegen_death_df$date)
#non cumu
timegen_death_noncumu_df = data.frame(timegen_death_df$date[-1], apply(timegen_death_df[,-1], 2, diff))
colnames(timegen_death_noncumu_df) = c('date', 'death_female', 'death_male')
df = timegen_death_noncumu_df
ggplot() +
geom_line(data = df, aes(x = date, y = female, color = 'female')) +
geom_line(data = df, aes(x = date, y = male, color = 'male'))+
ylab('')
df = time_non_cumu
ggplot() +
geom_line(data = df, aes(x = date, y = a0s, color = '0s')) +
geom_line(data = df, aes(x = date, y = a10s, color = '10s'))+
geom_line(data = df, aes(x = date, y = a20s, color = '20s'))+
geom_line(data = df, aes(x = date, y = a30s, color = '30s'))+
geom_line(data = df, aes(x = date, y = a40s, color = '40s'))+
geom_line(data = df, aes(x = date, y = a50s, color = '50s'))+
geom_line(data = df, aes(x = date, y = a60s, color = '60s'))+
geom_line(data = df, aes(x = date, y = a70s, color = '70s'))+
geom_line(data = df, aes(x = date, y = a70s, color = '80s'))+
ylab('')
normalize <- function(x)
{
return((x- mean(x)) /sd(x))
}
timeage_stand_df = apply(timeage_df[,2:ncol(timeage_df)], 2, normalize)
timeage_stand_df = data.frame(timeage_df[,1], timeage_stand_df)
timeage_stand_df[,1] = anytime::anydate(timeage_stand_df[,1])
colnames(timeage_stand_df)[1] = 'date'
df = timeage_stand_df
ggplot() +
geom_line(data = df, aes(x = date, y = a0s, color = '0s')) +
geom_line(data = df, aes(x = date, y = a10s, color = '10s'))+
geom_line(data = df, aes(x = date, y = a20s, color = '20s'))+
geom_line(data = df, aes(x = date, y = a30s, color = '30s'))+
geom_line(data = df, aes(x = date, y = a40s, color = '40s'))+
geom_line(data = df, aes(x = date, y = a50s, color = '50s'))+
geom_line(data = df, aes(x = date, y = a60s, color = '60s'))+
geom_line(data = df, aes(x = date, y = a70s, color = '70s'))+
geom_line(data = df, aes(x = date, y = a70s, color = '70s'))+
ylab('')
province$province = as.factor(province$province)
province_list = split(province, province$province)
province_df = as.data.frame(province_list)
pro_df = cbind(province_df$Busan.date,
province_df$Busan.confirmed,
province_df$Chungcheongbuk.do.confirmed,
province_df$Chungcheongnam.do.confirmed,
province_df$Daegu.confirmed,
province_df$Daejeon.confirmed,
province_df$Gangwon.do.confirmed,
province_df$Gwangju.confirmed,
province_df$Gyeonggi.do.confirmed,
province_df$Gyeongsangbuk.do.confirmed,
province_df$Gyeongsangnam.do.confirmed,
province_df$Incheon.confirmed,
province_df$Jeju.do.confirmed,
province_df$Jeollabuk.do.confirmed,
province_df$Jeollanam.do.confirmed,
province_df$Sejong.confirmed,
province_df$Seoul.confirmed,
province_df$Ulsan.confirmed)
temp = as.data.frame(apply(pro_df[,2:ncol(pro_df)], 2, as.numeric))
colnames(temp) = c('Busan', 'Chungcheongbuk', 'Chungcheongnam', 'Daegu', 'Daejeon', 'Gangwon','Gwangju', 'Gyeonggi', 'Gyeongsangbuk', 'Gyeongsangnam', 'Incheon', 'Jeju', 'Jeollabuk', 'Jeollanam', 'Sejong', 'Seoul', 'Ulsan')
pro_df = data.frame(province_df$Busan.date, temp)
colnames(pro_df)[1] = 'date'
#convert datetime
pro_df[,1] = anytime::anydate(pro_df[,1])
#non cumulation
pro_noncum_df = data.frame(pro_df$date[-1], apply(pro_df[,-1], 2, diff))
colnames(pro_noncum_df) = c('date', 'Busan', 'Chungcheongbuk', 'Chungcheongnam', 'Daegu', 'Daejeon', 'Gangwon','Gwangju', 'Gyeonggi', 'Gyeongsangbuk', 'Gyeongsangnam', 'Incheon', 'Jeju', 'Jeollabuk', 'Jeollanam', 'Sejong', 'Seoul', 'Ulsan')
normalize <- function(x)
{
return((x- min(x)) /(max(x)-min(x)))
}
pro_stand_df = apply(pro_df[,2:ncol(pro_df)], 2, normalize)
pro_stand_df = data.frame(pro_df[,1], pro_stand_df)
pro_stand_df[,1] = anytime::anydate(pro_stand_df[,1])
colnames(pro_stand_df)[1] = 'date'
normalize <- function(x)
{
return((x- mean(x)) /sd(x))
}
pro_stand_df = apply(pro_df[,2:ncol(pro_df)], 2, normalize)
pro_stand_df = data.frame(pro_df[,1], pro_stand_df)
pro_stand_df[,1] = anytime::anydate(pro_stand_df[,1])
colnames(pro_stand_df)[1] = 'date'
df = pro_noncum_df
ggplot() +
geom_line(data = df, aes(x = date, y = Busan, color = 'Busan')) +
geom_line(data = df, aes(x = date, y = Chungcheongbuk, color = 'Chungcheongbuk'))+
geom_line(data = df, aes(x = date, y = Chungcheongnam, color = 'Chungcheongnam'))+
geom_line(data = df, aes(x = date, y = Daegu, color = 'Daegu'))+
geom_line(data = df, aes(x = date, y = Daejeon, color = 'Daejeon'))+
geom_line(data = df, aes(x = date, y = Gangwon, color = 'Gangwon'))+
geom_line(data = df, aes(x = date, y = Gwangju, color = 'Gwangju'))+
geom_line(data = df, aes(x = date, y = Gyeonggi, color = 'Gyeonggi'))+
geom_line(data = df, aes(x = date, y = Gyeongsangbuk, color = 'Gyeongsangbuk'))+
geom_line(data = df, aes(x = date, y = Gyeongsangnam, color = 'Gyeongsangnam'))+
geom_line(data = df, aes(x = date, y = Incheon, color = 'Incheon'))+
geom_line(data = df, aes(x = date, y = Jeju, color = 'Jeju'))+
geom_line(data = df, aes(x = date, y = Jeollabuk, color = 'Jeollabuk'))+
geom_line(data = df, aes(x = date, y = Jeollanam, color = 'Jeollanam'))+
geom_line(data = df, aes(x = date, y = Sejong, color = 'Sejong'))+
geom_line(data = df, aes(x = date, y = Seoul, color = 'Seoul'))+
geom_line(data = df, aes(x = date, y = Ulsan, color = 'Jeollabuk'))+
ylab('')
df = pro_df
ggplot() +
geom_line(data = df, aes(x = date, y = Seoul, color = 'Seoul'))+
geom_line(data = df, aes(x = date, y = Daegu, color = 'Daegu'))+
geom_line(data = df, aes(x = date, y = Gyeonggi, color = 'Gyeonggi'))+
geom_line(data = df, aes(x = date, y = Gyeongsangbuk, color = 'Gyeongsangbuk'))
df = pro_stand_df
ggplot() +
geom_line(data = df, aes(x = date, y = Seoul, color = 'Seoul'))+
geom_line(data = df, aes(x = date, y = Daegu, color = 'Daegu'))+
geom_line(data = df, aes(x = date, y = Gyeonggi, color = 'Gyeonggi'))+
geom_line(data = df, aes(x = date, y = Gyeongsangbuk, color = 'Gyeongsangbuk'))
corr_4_df = data.frame(pro_df$Seoul, pro_df$Daegu, pro_df$Gyeonggi, pro_df$Gyeongsangbuk)
colnames(corr_4_df) = c('Seoul', 'Daegu', 'Gyeonggi', 'Gyeongsangbuk')
corr_4 = cor(corr_4_df)
corr_pro = cor(pro_df[,2:ncol(pro_df)])
time_non_cumu
time_death_non_cumu
case_search_df$date = as.Date(case_search_df$date)
timegen_death_noncumu_df
timegen_confirm_noncumu_df
pro_noncum_df
df = merge(time_non_cumu, time_death_non_cumu, by = 'date')
df = merge(df, timegen_death_noncumu_df, by = 'date')
df = merge(df, timegen_confirm_noncumu_df, by = 'date')
df = merge(df, case_search_df, by = 'date')
df = df[,-24]
df$tmr_confirmed = data.table::shift(df$confirmed, n = -1)
corr = cor(df[,-1])
lin_reg = lm(tmr_confirmed ~ ., data = df)
summary(lin_reg)
ind <- nrow(df)
train <- df[1:as.integer((ind*0.7)), ]
test <- df[as.integer((ind*0.7+1)):nrow(df), ]
predicted = predict(lin_reg, test)
predicted
install.packages('Metrics')
result = Metrics::rmse(test, Metrics)
Metrics::rmse
result = Metrics::rmse(test, Metrics)
library(ggplot2)
library(Metrics)
result = rmse(test, Metrics)
result = rmse(test, test)
test
result = rmse(test$tmr_confirmed, predicted)
result
test$tmr_confirmed
predicted
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
test$tmr_confirmed
ind <- nrow(df)
train <- df[1:as.integer((ind*0.7)), ]
test <- df[as.integer((ind*0.7+1)):(nrow(df)-1), ]
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
predicted = predict(lin_reg, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
test$tmr_confirmed
as.numeric(predicted)
predicted
ind <- sample(seq_len(nrow(df)), size = nrow(df))
ind
train <- df[1:as.integer((ind*0.7)), ]
ind <- sample(seq_len(nrow(df)), size = nrow(df))
train <- df[ind, ]
test <- df[-ind, ]
test
train
test
ind
df[-ind, ]
df
set.seed(4011)
ind <- sample(seq_len(nrow(df)), size = nrow(df)*0.7)
train <- df[ind, ]
test <- df[-ind, ]
test
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
predicted = predict(lin_reg, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
library(ggplot2)
library(Metrics)
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
predicted = predict(lin_reg, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
train
test$tmr_confirmed
as.numeric(predicted)
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
predicted = predict(lin_reg, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
library(ggplot2)
library(Metrics)
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
predicted = predict(lin_reg, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
step(lin_reg)
lin_reg_AIC = lm(formula = tmr_confirmed ~ date + confirmed_0s + confirmed_10s +
confirmed_20s + confirmed_30s + confirmed_40s + confirmed_50s +
confirmed_60s + confirmed_70s + confirmed_80s + death_50s +
death_80s + confirmed_female + confirmed_male + test + negative +
coronavirus, data = train)
summary(lin_reg)
summary(lin_reg_AIC)
summary(lin_reg_AIC)
predicted = predict(lin_reg_AIC, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
predicted = predict(lin_reg, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
step(lin_reg)
lin_reg_AIC = lm(formula = tmr_confirmed ~ date + confirmed_0s + confirmed_10s +
confirmed_20s + confirmed_30s + confirmed_40s + confirmed_50s +
confirmed_60s + confirmed_70s + confirmed_80s + death_50s +
death_80s + confirmed_female + confirmed_male + test + negative +
coronavirus, data = train)
summary(lin_reg_AIC)
predicted = predict(lin_reg_AIC, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
install.packages('library(randomForest)')
install.packages('randomForest')
library(ggplot2)
library(Metrics)
library(randomForest)
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=10, importance=TRUE)
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE)
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE)
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE)
View(train)
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE, na.action=na.roughfix)
View(train)
rownames(df) = df$date
df
df = df[,-1]
df
lin_reg = lm(tmr_confirmed ~ ., data = train)
summary(lin_reg)
predicted = predict(lin_reg, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
step(lin_reg)
lin_reg_AIC = lm(formula = tmr_confirmed ~ date + confirmed_0s + confirmed_10s +
confirmed_20s + confirmed_30s + confirmed_40s + confirmed_50s +
confirmed_60s + confirmed_70s + confirmed_80s + death_50s +
death_80s + confirmed_female + confirmed_male + test + negative +
coronavirus, data = train)
summary(lin_reg_AIC)
predicted = predict(lin_reg_AIC, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE)
set.seed(4011)
ind <- sample(seq_len(nrow(df)), size = nrow(df)*0.7)
rownames(df) = df$date
df = df[,-1]
train <- df[ind, ]
test <- df[-ind, ]
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE)
tmr_confirmed
train
View(train)
tmr_confirmed
df = merge(time_non_cumu, time_death_non_cumu, by = 'date')
df = merge(df, timegen_death_noncumu_df, by = 'date')
df = merge(df, timegen_confirm_noncumu_df, by = 'date')
df = merge(df, case_search_df, by = 'date')
df = df[,-24]
df$tmr_confirmed = data.table::shift(df$confirmed, n = -1)
View(df)
set.seed(4011)
ind <- sample(seq_len(nrow(df)), size = nrow(df)*0.7)
rownames(df) = df$date
df = df[,-1]
train <- df[ind, ]
test <- df[-ind, ]
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE)
View(train)
df = merge(time_non_cumu, time_death_non_cumu, by = 'date')
df = merge(df, timegen_death_noncumu_df, by = 'date')
df = merge(df, timegen_confirm_noncumu_df, by = 'date')
df = merge(df, case_search_df, by = 'date')
df = df[,-24]
df$tmr_confirmed = data.table::shift(df$confirmed, n = -1)
View(df)
df = merge(time_non_cumu, time_death_non_cumu, by = 'date')
df = merge(df, timegen_death_noncumu_df, by = 'date')
df = merge(df, timegen_confirm_noncumu_df, by = 'date')
df = merge(df, case_search_df, by = 'date')
df = df[,-24]
df$tmr_confirmed = data.table::shift(df$confirmed, n = -1)
corr = cor(df[,-1])
lin_reg = lm(tmr_confirmed ~ ., data = df)
summary(lin_reg)
set.seed(4011)
ind <- sample(seq_len(nrow(df)), size = nrow(df)*0.7)
rownames(df) = df$date
df = df[-nrow(df),-1]
train <- df[ind, ]
test <- df[-ind, ]
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE)
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE)
train
df = na.omit(df)
set.seed(4011)
ind <- sample(seq_len(nrow(df)), size = nrow(df)*0.7)
rownames(df) = df$date
df = df[-nrow(df),-1]
train <- df[ind, ]
test <- df[-ind, ]
train = na.omit(train)
test = na.omit(test)
df = merge(time_non_cumu, time_death_non_cumu, by = 'date')
df = merge(df, timegen_death_noncumu_df, by = 'date')
df = merge(df, timegen_confirm_noncumu_df, by = 'date')
df = merge(df, case_search_df, by = 'date')
df = df[,-24]
df$tmr_confirmed = data.table::shift(df$confirmed, n = -1)
set.seed(4011)
ind <- sample(seq_len(nrow(df)), size = nrow(df)*0.7)
rownames(df) = df$date
df = df[-nrow(df),-1]
train <- df[ind, ]
test <- df[-ind, ]
train = na.omit(train)
test = na.omit(test)
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=2, importance=TRUE)
rf_classifier
predicted = predict(rf_classifier, test)\
predicted = predict(rf_classifier, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
as.numeric(predicted)
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=10, importance=TRUE)
predicted = predict(rf_classifier, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=10, importance=TRUE)
predicted = predict(rf_classifier, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
result = []
result = list()
tmr_confirmed
try_list = c(100,200,300,400,500)
result = list()
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=100, mtry=10, importance=TRUE)
predicted = predict(rf_classifier, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
result = list()
rf_classifier = randomForest(tmr_confirmed ~ ., data = train, ntree=500, mtry=10, importance=TRUE)
predicted = predict(rf_classifier, test)
result = rmse(test$tmr_confirmed, as.numeric(predicted))
result
